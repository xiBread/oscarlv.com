---
import quotes from "../data/quotes.json";
import { getEntry } from "astro:content";
import Container from "../components/container/Container.astro";
import Layout from "../layouts/Layout.astro";

export const prerender = false;

const entry = await getEntry("writing", "about");
const { Content } = await entry.render();

const quote = quotes[Math.floor(Math.random() * quotes.length)];
---

<Layout title="about">
	<Container class="mt-16 sm:mt-32">
		<article class="slide prose prose-zinc mx-auto dark:prose-invert">
			<div class="flex items-center">
				<h1 class="mb-1">{entry.data.title}</h1>

				<a href="https://github.com/xiBread" target="_blank" class="ml-3">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 16 16"
						class="opacity-50 hover:opacity-100"
					>
						<path
							fill="currentColor"
							d="M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"
						>
						</path>
					</svg>
				</a>
			</div>

			<div class="mb-10">
				<blockquote class="mb-2 whitespace-pre-wrap">"{quote.content}"</blockquote>

				<p class="mt-2 text-sm dark:text-zinc-400">
					&mdash; {quote.quotee + (quote.source ? ", " : "")}

					{
						quote.source && (
							<cite>
								{typeof quote.source === "object" ? (
									<a href={quote.source.url}>{quote.source.text}</a>
								) : (
									quote.source
								)}
							</cite>
						)
					}
				</p>
			</div>

			<Content />
		</article>
	</Container>
</Layout>

<style is:global>
	.slide > * {
		--slide-delay: 0;
		animation: slide 1s calc(var(--slide-delay) * 150ms) 1 both;
	}

	.slide > *:nth-child(1) {
		--slide-delay: 1;
	}

	.slide > *:nth-child(2) {
		--slide-delay: 2;
	}

	.slide > *:nth-child(3) {
		--slide-delay: 3;
	}

	.slide > *:nth-child(4) {
		--slide-delay: 4;
	}

	.slide > *:nth-child(5) {
		--slide-delay: 5;
	}

	.slide > *:nth-child(6) {
		--slide-delay: 6;
	}

	@keyframes slide {
		from {
			transform: translateY(-10px);
			opacity: 0;
		}

		to {
			transform: translateY(0);
			opacity: 100;
		}
	}
</style>
